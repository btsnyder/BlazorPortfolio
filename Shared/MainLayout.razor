@inherits LayoutComponentBase

<MudThemeProvider Theme="MyCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Filled.Home" Class="me-3" Color="Color.Inherit" Link="/" Target="_self" />
        <MudText Typo="Typo.h4">BRANDON SNYDER</MudText>
        @if (_current >= Breakpoint.Sm)
        {
            <MudText Typo="Typo.subtitle1" Class="ms-5">software developer</MudText>
        }
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/btsnyder/" Target="_blank" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private Guid _subscriptionId;
    private Breakpoint _current;

    [Inject] IBreakpointService BreakpointListener { get; set; }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" }
            }
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
			{
                _current = breakpoint;
				InvokeAsync(StateHasChanged);
			}, new ResizeOptions
			{
				ReportRate = 250,
				NotifyOnBreakpointOnly = true,
			});

			_subscriptionId = subscriptionResult.SubscriptionId;
			StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);
}